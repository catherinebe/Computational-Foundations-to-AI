{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment 1_tosubmit",
      "provenance": [],
      "collapsed_sections": [
        "jfyajknzeyZc",
        "9VK1diFTnp57",
        "gnPbURqPnnqH"
      ],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNnBqyxBOyuI1NvQ3zizYVB"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jfyajknzeyZc"
      },
      "source": [
        "Catherine Berrouet, Z23353674\n",
        "\n",
        "Computational Foundations of AI, Fall 2020\n",
        " \n",
        "Assignment 1\n",
        "\n",
        "# Task: Ridge Regression Fit\n",
        "(From Sratch using Python)\n",
        "\n",
        "You may **not** use a library that can perform *gradient descent, cross validation, ridge regression, least squares regression, optimization, etc.* to successfully complete this programing assignment. The goal of this assignment is not to learn how to use particular libraries of a language, but it is to instead understand how key methods in statistical machine learning are implemented. \n",
        " \n",
        "\n",
        "---\n",
        "\n",
        "Opportunity for 10% extra credit if you additionally implement the assignment using built- in statistical or machine learning libraries (see Deliverable 6 at end of the document).\n",
        "\n",
        "---\n",
        "\n",
        "In this assignment you will be analyzing credit card data from ùëÅ = 400 training observations. The goal is to fit a model that can predict credit balance based on ùëù = 9 features describing an individual, which include an individual‚Äôs income, credit limit, credit rating, number of credit cards, age, education level, gender, student status, and marriage status. \n",
        "\n",
        "**Specifically, you will perform a penalized (regularized) least squares fit of a linear model using ridge regression, with the model parameters obtained by batch gradient descent. The tuning parameter will be chosen using five-fold cross validation, and the best-fit model parameters will be inferred on the training dataset conditional on an optimal tuning parameter.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4v5KzsiPx9y0"
      },
      "source": [
        "# Import Data and Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-ao7VVfq3aI"
      },
      "source": [
        "# Import Python libraries for data\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# Libraries for plotting\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "# import seaborn as sns"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FagvOmmZq_61",
        "outputId": "a23993a8-ce6c-410d-a8c8-05be307a6460",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Import data from csv file uploaded onto google drive\n",
        "data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Computational AI/Credit_N400_p9.csv')\n",
        "#data = pd.read_csv('/content/Credit_N400_p9.csv') #manual upload csv data file\n",
        "data #prints data for viewing"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Limit</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Cards</th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Student</th>\n",
              "      <th>Married</th>\n",
              "      <th>Balance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.891</td>\n",
              "      <td>3606</td>\n",
              "      <td>283</td>\n",
              "      <td>2</td>\n",
              "      <td>34</td>\n",
              "      <td>11</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>106.025</td>\n",
              "      <td>6645</td>\n",
              "      <td>483</td>\n",
              "      <td>3</td>\n",
              "      <td>82</td>\n",
              "      <td>15</td>\n",
              "      <td>Female</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>104.593</td>\n",
              "      <td>7075</td>\n",
              "      <td>514</td>\n",
              "      <td>4</td>\n",
              "      <td>71</td>\n",
              "      <td>11</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>148.924</td>\n",
              "      <td>9504</td>\n",
              "      <td>681</td>\n",
              "      <td>3</td>\n",
              "      <td>36</td>\n",
              "      <td>11</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>55.882</td>\n",
              "      <td>4897</td>\n",
              "      <td>357</td>\n",
              "      <td>2</td>\n",
              "      <td>68</td>\n",
              "      <td>16</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>12.096</td>\n",
              "      <td>4100</td>\n",
              "      <td>307</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>13</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>13.364</td>\n",
              "      <td>3838</td>\n",
              "      <td>296</td>\n",
              "      <td>5</td>\n",
              "      <td>65</td>\n",
              "      <td>17</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>57.872</td>\n",
              "      <td>4171</td>\n",
              "      <td>321</td>\n",
              "      <td>5</td>\n",
              "      <td>67</td>\n",
              "      <td>12</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>37.728</td>\n",
              "      <td>2525</td>\n",
              "      <td>192</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>13</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>18.701</td>\n",
              "      <td>5524</td>\n",
              "      <td>415</td>\n",
              "      <td>5</td>\n",
              "      <td>64</td>\n",
              "      <td>7</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>966</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows √ó 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      Income  Limit  Rating  Cards  ...  Gender  Student Married Balance\n",
              "0     14.891   3606     283      2  ...    Male       No     Yes     333\n",
              "1    106.025   6645     483      3  ...  Female      Yes     Yes     903\n",
              "2    104.593   7075     514      4  ...    Male       No      No     580\n",
              "3    148.924   9504     681      3  ...  Female       No      No     964\n",
              "4     55.882   4897     357      2  ...    Male       No     Yes     331\n",
              "..       ...    ...     ...    ...  ...     ...      ...     ...     ...\n",
              "395   12.096   4100     307      3  ...    Male       No     Yes     560\n",
              "396   13.364   3838     296      5  ...    Male       No      No     480\n",
              "397   57.872   4171     321      5  ...  Female       No     Yes     138\n",
              "398   37.728   2525     192      1  ...    Male       No     Yes       0\n",
              "399   18.701   5524     415      5  ...  Female       No      No     966\n",
              "\n",
              "[400 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pqn8_FG3yKHh"
      },
      "source": [
        "## Cleaning and reformat raw data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ASIXtXLgsldO",
        "outputId": "3c36b79b-7fe7-4f30-bab7-b4138996f8c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "# Reformatting categorical data into numerical binary values\n",
        "datacopy = data # We use a copy and keep original import\n",
        "clean = datacopy.replace({'Male': 0, 'Female':1})\n",
        "clean = clean.replace({'No': 0, 'Yes': 1})\n",
        "clean"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Limit</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Cards</th>\n",
              "      <th>Age</th>\n",
              "      <th>Education</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Student</th>\n",
              "      <th>Married</th>\n",
              "      <th>Balance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.891</td>\n",
              "      <td>3606</td>\n",
              "      <td>283</td>\n",
              "      <td>2</td>\n",
              "      <td>34</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>106.025</td>\n",
              "      <td>6645</td>\n",
              "      <td>483</td>\n",
              "      <td>3</td>\n",
              "      <td>82</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>104.593</td>\n",
              "      <td>7075</td>\n",
              "      <td>514</td>\n",
              "      <td>4</td>\n",
              "      <td>71</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>148.924</td>\n",
              "      <td>9504</td>\n",
              "      <td>681</td>\n",
              "      <td>3</td>\n",
              "      <td>36</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>55.882</td>\n",
              "      <td>4897</td>\n",
              "      <td>357</td>\n",
              "      <td>2</td>\n",
              "      <td>68</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>12.096</td>\n",
              "      <td>4100</td>\n",
              "      <td>307</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>13.364</td>\n",
              "      <td>3838</td>\n",
              "      <td>296</td>\n",
              "      <td>5</td>\n",
              "      <td>65</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>57.872</td>\n",
              "      <td>4171</td>\n",
              "      <td>321</td>\n",
              "      <td>5</td>\n",
              "      <td>67</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>37.728</td>\n",
              "      <td>2525</td>\n",
              "      <td>192</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>18.701</td>\n",
              "      <td>5524</td>\n",
              "      <td>415</td>\n",
              "      <td>5</td>\n",
              "      <td>64</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>966</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows √ó 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      Income  Limit  Rating  Cards  ...  Gender  Student  Married  Balance\n",
              "0     14.891   3606     283      2  ...       0        0        1      333\n",
              "1    106.025   6645     483      3  ...       1        1        1      903\n",
              "2    104.593   7075     514      4  ...       0        0        0      580\n",
              "3    148.924   9504     681      3  ...       1        0        0      964\n",
              "4     55.882   4897     357      2  ...       0        0        1      331\n",
              "..       ...    ...     ...    ...  ...     ...      ...      ...      ...\n",
              "395   12.096   4100     307      3  ...       0        0        1      560\n",
              "396   13.364   3838     296      5  ...       0        0        0      480\n",
              "397   57.872   4171     321      5  ...       1        0        1      138\n",
              "398   37.728   2525     192      1  ...       0        0        1        0\n",
              "399   18.701   5524     415      5  ...       1        0        0      966\n",
              "\n",
              "[400 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ayLY-VPOyTbi"
      },
      "source": [
        "## Initialize Variables for Training\n",
        "\n",
        "### Algorithms\n",
        "**Functions**\n",
        "* total_predict: computes predictions\n",
        "* residual: computes RSS\n",
        "* cost: computes min total cost\n",
        "* gradient: computes single gradient\n",
        "* gradient descent: computes total gradients under max iterations\n",
        "\n",
        "**Summary of Initialized Variables**\n",
        "\n",
        "* Recall our parameters for use in the coded algorithms below: X, Y, N, p, beta\n",
        "* X is our normalized training data centered and scaled to have unit standard deviation\n",
        "* Y is the true value data generated as ùëÅ-dimensional centered response vector ùê≤\n",
        "* N is the number of rows\n",
        "* p is the number of columns should be = (dimension of beta)\n",
        "* beta is our random initialized parameter vector\n",
        "\n",
        "Now we will introduce some additional assumptions for our fitting as follows:\n",
        "* tune is the Tuning Parameters Vector aka our lambda used in our Cost Function Equation\n",
        "* iter is set to 1000\n",
        "* alpha is initialized to 10^(-5) as suggested to act as proof of convergence within 1000 iterations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yJ1HfQZfrqyA",
        "outputId": "b5f02b36-9a7b-4c93-8e83-51d7655615ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1105
        }
      },
      "source": [
        "# Training Data, X, Y, N, p\n",
        "training_data = clean.iloc[:, :-1]                                # we only take the columns with 9 features we want to analyze\n",
        "X = (training_data - training_data.mean())/training_data.std()    # X_normalized\n",
        "Y_data = pd.DataFrame(clean.iloc[:, -1])                          # dependent variables; the true values y_i (i.e Credit Balance column)\n",
        "Y_centered = Y_data - Y_data.mean(axis=0)                         # Y_centered\n",
        "Y = pd.DataFrame(Y_centered)\n",
        "N = X.shape[0]                                                    # 400 rows\n",
        "p = X.shape[1]                                                    # 9 columns\n",
        "# randomized initialization beta vector\n",
        "random_initialization = np.random.uniform(low=-1.0, high=1.0, size=p)\n",
        "beta = pd.DataFrame(np.random.uniform(low=-1.0, high=1.0, size=p))\n",
        "# tuning parameter vector\n",
        "tune = [10**(-2), 10**(-1), 10**(0), 10, 10**(2), 10**(3), 10**(4)]\n",
        "max_iter = 1000\n",
        "alpha = 10**(-5)\n",
        "\n",
        "# Viewing all variables\n",
        "print('Training Data')\n",
        "print(training_data)\n",
        "print('')\n",
        "print('X')\n",
        "print(X)\n",
        "print('Y')\n",
        "print(Y)\n",
        "print('')\n",
        "print('N =', N, ', p =', p)\n",
        "print('')\n",
        "print('beta = ', beta)\n",
        "print('dimension:', beta.shape)\n",
        "print('')\n",
        "print('lambda tuning vector = ', tune)\n",
        "print('')\n",
        "print('alpha:', alpha)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training Data\n",
            "      Income  Limit  Rating  Cards  Age  Education  Gender  Student  Married\n",
            "0     14.891   3606     283      2   34         11       0        0        1\n",
            "1    106.025   6645     483      3   82         15       1        1        1\n",
            "2    104.593   7075     514      4   71         11       0        0        0\n",
            "3    148.924   9504     681      3   36         11       1        0        0\n",
            "4     55.882   4897     357      2   68         16       0        0        1\n",
            "..       ...    ...     ...    ...  ...        ...     ...      ...      ...\n",
            "395   12.096   4100     307      3   32         13       0        0        1\n",
            "396   13.364   3838     296      5   65         17       0        0        0\n",
            "397   57.872   4171     321      5   67         12       1        0        1\n",
            "398   37.728   2525     192      1   44         13       0        0        1\n",
            "399   18.701   5524     415      5   64          7       1        0        0\n",
            "\n",
            "[400 rows x 9 columns]\n",
            "\n",
            "X\n",
            "       Income     Limit    Rating  ...    Gender   Student   Married\n",
            "0   -0.860505 -0.489386 -0.464957  ... -1.034339 -0.332916  0.794400\n",
            "1    1.725276  0.827225  0.827667  ...  0.964384  2.996248  0.794400\n",
            "2    1.684646  1.013518  1.028023  ... -1.034339 -0.332916 -1.255665\n",
            "3    2.942467  2.065853  2.107363  ...  0.964384 -0.332916 -1.255665\n",
            "4    0.302549  0.069925  0.013314  ... -1.034339 -0.332916  0.794400\n",
            "..        ...       ...       ...  ...       ...       ...       ...\n",
            "395 -0.939809 -0.275366 -0.309842  ... -1.034339 -0.332916  0.794400\n",
            "396 -0.903832 -0.388875 -0.380936  ... -1.034339 -0.332916 -1.255665\n",
            "397  0.359012 -0.244606 -0.219358  ...  0.964384 -0.332916  0.794400\n",
            "398 -0.212542 -0.957716 -1.053100  ... -1.034339 -0.332916  0.794400\n",
            "399 -0.752403  0.341565  0.388175  ...  0.964384 -0.332916 -1.255665\n",
            "\n",
            "[400 rows x 9 columns]\n",
            "Y\n",
            "     Balance\n",
            "0   -187.015\n",
            "1    382.985\n",
            "2     59.985\n",
            "3    443.985\n",
            "4   -189.015\n",
            "..       ...\n",
            "395   39.985\n",
            "396  -40.015\n",
            "397 -382.015\n",
            "398 -520.015\n",
            "399  445.985\n",
            "\n",
            "[400 rows x 1 columns]\n",
            "\n",
            "N = 400 , p = 9\n",
            "\n",
            "beta =            0\n",
            "0  0.788917\n",
            "1  0.374703\n",
            "2 -0.342405\n",
            "3 -0.059052\n",
            "4 -0.707589\n",
            "5 -0.753808\n",
            "6  0.444057\n",
            "7  0.175548\n",
            "8 -0.613126\n",
            "dimension: (9, 1)\n",
            "\n",
            "lambda tuning vector =  [0.01, 0.1, 1, 10, 100, 1000, 10000]\n",
            "\n",
            "alpha: 1e-05\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4tyNPL8oyj-8"
      },
      "source": [
        "# Training"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SZXyYqtuyrfi"
      },
      "source": [
        "## Prediction Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "786Bz3XXxRJR",
        "outputId": "3b7fb8d6-b546-475a-fb6d-f531d8220cd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "source": [
        "# Prediction Function\n",
        "def total_predict(X, B):\n",
        "  '''\n",
        "    This function computes the dot product between the rows of design matrix and parameters column vector.\n",
        "    It uses the predict function to iterate through each row of design matrix.\n",
        "    :param X: training_data as pandas dataframe (i.e our Nxp design matrix)\n",
        "    :param B: is parameters_vector as pandas dataframe syntax (i.e p-dimensional B)\n",
        "    :return: predictions vector (i.e. dot product of X and beta parameters vector)\n",
        "  '''\n",
        "      # Corrective measure: Double check appropriate dimensions of dataframes\n",
        "  dim1 = X.shape[1]\n",
        "  dim2 = B.shape[0]\n",
        "  if  (dim1) == (dim2):\n",
        "    predictions = X.dot(B.to_numpy())\n",
        "    return (predictions)\n",
        "  else:\n",
        "    print('Cannot compute. Please check Dimensions!')\n",
        "    print('Dimensions of design matrix Nxp: ', X.shape)\n",
        "    print('Dimensions of Initialized Parameter Vector: (', len(B), 'x 1)')\n",
        "\n",
        "# Output\n",
        "yhat = total_predict(X, beta)\n",
        "print('Total predictions, yhat:')\n",
        "print(yhat)\n",
        "print('')\n",
        "print('yhat Transposed First few entries:')\n",
        "print((yhat.T).head(3))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total predictions, yhat:\n",
            "            0\n",
            "0   -0.186870\n",
            "1    0.398970\n",
            "2    1.526057\n",
            "3    4.909429\n",
            "4   -1.824202\n",
            "..        ...\n",
            "395 -0.665781\n",
            "396 -1.803241\n",
            "397 -0.053657\n",
            "398 -0.499326\n",
            "399  1.667169\n",
            "\n",
            "[400 rows x 1 columns]\n",
            "\n",
            "yhat Transposed First few entries:\n",
            "       0        1         2         3    ...       396       397       398       399\n",
            "0 -0.18687  0.39897  1.526057  4.909429  ... -1.803241 -0.053657 -0.499326  1.667169\n",
            "\n",
            "[1 rows x 400 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p86kFFgPytvb"
      },
      "source": [
        "## RSS Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Zqfg3CsxjlB",
        "outputId": "40862b96-c408-4971-c69f-9d5c3e72c82c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "source": [
        "# RSS Function\n",
        "def residual(Y, yhat):\n",
        "  ''' \n",
        "  :param Y: true values\n",
        "  :param yhat: predictions (i.e. dot product of X and parametric vector beta)\n",
        "  :return: residual sum of sqaures\n",
        "  '''\n",
        "  dim1 = Y.shape\n",
        "  dim2 = yhat.shape\n",
        "  print(\"Y and yhat Dimensions Check:\")\n",
        "  print(dim1, 'and', dim2)\n",
        "  rss = pd.DataFrame((Y.values - yhat.values)**2)\n",
        "  return rss\n",
        "\n",
        "# Output\n",
        "residual_result = residual(Y,yhat)\n",
        "print('rss:', residual_result)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Y and yhat Dimensions Check:\n",
            "(400, 1) and (400, 1)\n",
            "rss:                  0\n",
            "0     34904.750080\n",
            "1    146372.070459\n",
            "2      3417.448002\n",
            "3    192787.357378\n",
            "4     35040.394995\n",
            "..             ...\n",
            "395    1652.486000\n",
            "396    1460.138553\n",
            "397  145894.467791\n",
            "398  269896.535752\n",
            "399  197418.335069\n",
            "\n",
            "[400 rows x 1 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9O4uuHd5ywv7"
      },
      "source": [
        "## Cost Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aQSeooh8xp_E",
        "outputId": "b14c91cf-fc65-4a6c-8396-e73b49031835",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        }
      },
      "source": [
        "# Cost Function\n",
        "def cost(rss, tuning, b):\n",
        "  ''' \n",
        "  :param b: parametric_vector_B\n",
        "  :param rss: residual sum of squares \n",
        "  :param tuning: tuning_parameter_vector\n",
        "  :return: minimum cost computation\n",
        "  '''\n",
        "  # Checking pandas DataFrame dimensions\n",
        "  tuning = pd.DataFrame(tuning)\n",
        "  dim1, dim2, dim3 = rss.shape, tuning.shape, b.shape\n",
        "  print('')\n",
        "  print('rss Dimensions Check:', dim1)\n",
        "  print('tuning parameter vector Dimensions Check:', dim2)\n",
        "  print('b randomized vector Dimensions Check:', dim3)\n",
        "  print('')\n",
        "  # Cost Computation\n",
        "  tobesummed = []\n",
        "  for j in range(len(b)):\n",
        "    compute = tuning @ ((b.iloc[j])**2)\n",
        "    tobesummed.append(compute)\n",
        "  regularization = sum(tobesummed)\n",
        "  total_cost = rss.values + ((regularization).T).values\n",
        "  # Convert to pandas Dataframe syntax\n",
        "  return pd.DataFrame(total_cost)\n",
        "\n",
        "# Output\n",
        "rss1 = residual(Y, yhat)\n",
        "cost_result = cost(rss1, tune, beta)\n",
        "print('Cost Function Computation:')\n",
        "print(cost_result)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Y and yhat Dimensions Check:\n",
            "(400, 1) and (400, 1)\n",
            "\n",
            "rss Dimensions Check: (400, 1)\n",
            "tuning parameter vector Dimensions Check: (7, 1)\n",
            "b randomized vector Dimensions Check: (9, 1)\n",
            "\n",
            "Cost Function Computation:\n",
            "                 0              1  ...              5              6\n",
            "0     34904.775643   34905.005716  ...   37461.106772   60468.317005\n",
            "1    146372.096023  146372.326095  ...  148928.427152  171935.637385\n",
            "2      3417.473565    3417.703638  ...    5973.804694   28981.014927\n",
            "3    192787.382942  192787.613014  ...  195343.714071  218350.924304\n",
            "4     35040.420558   35040.650630  ...   37596.751687   60603.961920\n",
            "..             ...            ...  ...            ...            ...\n",
            "395    1652.511564    1652.741636  ...    4208.842693   27216.052926\n",
            "396    1460.164116    1460.394189  ...    4016.495245   27023.705478\n",
            "397  145894.493355  145894.723427  ...  148450.824484  171458.034717\n",
            "398  269896.561316  269896.791388  ...  272452.892445  295460.102678\n",
            "399  197418.360632  197418.590704  ...  199974.691761  222981.901994\n",
            "\n",
            "[400 rows x 7 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BGUReMDLyzEc"
      },
      "source": [
        "## Single Gradient Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vEUVhxVmxx6Q",
        "outputId": "e62edae5-4821-4764-fabd-ead282f13be4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "# Single Gradient Computation Function\n",
        "def gradient(X,Y, b, tuning_parameter_vector, alpha):\n",
        "  ''' \n",
        "  This function computes the gradient for each b_j in the parametric vector B.\n",
        "  :param X: training_data, this is our Nxp standardized matrix\n",
        "  :param Y: normalized predictions, our yhats\n",
        "  :param b: randomly initialized parametric vector, beta\n",
        "  :param tuning_parameter_vector: our lambdas vector of 7 values\n",
        "  :param alpha: starting point for learning\n",
        "\n",
        "  Note: This is just 1 iteration to simply test gradient computation.\n",
        "  '''\n",
        "  # Comment: I've broken down each step of the computation mathematically \n",
        "  # in order to ensure the syntax for the pandas Dataframe is correct and precise\n",
        "  for lambda_value in tuning_parameter_vector:\n",
        "    for k in range(len(b)):\n",
        "        step1 = Y.values -(X.dot(b.to_numpy()))\n",
        "        X_t = X.iloc[:, :k] # X column k transposed\n",
        "        step2 = (X_t).T  @ step1\n",
        "        step3 = lambda_value * b.iloc[k] - step2\n",
        "        step4 = 2 * lambda_value * step3\n",
        "        step5 = b.iloc[k] - step4\n",
        "        beta_update = step5\n",
        "  return beta_update\n",
        "\n",
        "# Output\n",
        "print('Single gradient function computation (check):')\n",
        "singlegradient = gradient(X,Y, beta, tune, alpha)\n",
        "print(singlegradient)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Single gradient function computation (check):\n",
            "                      0\n",
            "Income     1.818221e+09\n",
            "Limit      3.279393e+09\n",
            "Rating     3.286506e+09\n",
            "Cards      4.405286e+08\n",
            "Age        1.335926e+08\n",
            "Education  9.937858e+07\n",
            "Gender     1.978962e+08\n",
            "Student    1.071097e+09\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VvXKVFA2zbLS"
      },
      "source": [
        "## Gradient Descent Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "olhI_-LnzekH",
        "outputId": "6ab770d9-cc2b-4f19-dacb-3748fcc10c19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "# Gradient Descent Function\n",
        "def gd(X,Y,tune,alpha,max_iter):\n",
        "  '''\n",
        "  :param X: our standardized Nxp design matrix, <class 'pandas.core.frame.DataFrame>\n",
        "  :param Y: our N-dimensional centered y\n",
        "  :param beta: our randomply initialized parametric vector B\n",
        "  :param max_iter: max iterations alloted for convergence\n",
        "  :param alpha: proof of when convergence occurs (i.e. 2*alpha*lambda <1)\n",
        "  :param L: lambda value in tuning parameter vector\n",
        "  :return beta_update, cost: total gradient calculation and cost computation\n",
        "\n",
        "  This function is used for 'training' phase/step.\n",
        "  '''\n",
        "  # Computations\n",
        "  b = pd.DataFrame(data=np.random.uniform(-1, 1, X.shape[1]))\n",
        "  XB = pd.DataFrame((X.values).dot(b.values))\n",
        "  Y_minus_XB = pd.DataFrame(Y.values - XB.values)\n",
        "  X_T_dotprod_Y_minus_XB = (X.T).dot(Y_minus_XB)\n",
        "\n",
        "  # Change to dataframe syntax for computations\n",
        "  tuning = pd.DataFrame(tune)\n",
        "  Lb = tuning.dot(b.T)\n",
        "  # Making pretty dataframe for lambabeta - for faster computations\n",
        "  d = pd.Series(tune)\n",
        "  lambda_beta_df = (Lb.T).rename(columns = d, inplace = False)\n",
        "  # We will use this dataframe to plot a graph later\n",
        "\n",
        "  # Iterate for every column in lambda_beta dataframe and subtract XB column\n",
        "  for i in lambda_beta_df.columns:\n",
        "    compute = lambda_beta_df[i].values - (X_T_dotprod_Y_minus_XB.iloc[:,0].values)\n",
        "\n",
        "  # Iterate for 1000 iterations - this yields convergence by given assumption\n",
        "  for iteration in range(max_iter):\n",
        "    b_temp = (2*alpha)*(pd.DataFrame(compute))\n",
        "    b_update = b - b_temp\n",
        "  return b_update, lambda_beta_df # return new updated beta vector\n",
        "\n",
        "# Output\n",
        "gd_computation = (gd(X, Y, tune, alpha, 1000)[0])\n",
        "to_plot = (gd(X, Y, tune, alpha, 1000)[1])\n",
        "print('For gradient descent:')\n",
        "print(gd_computation)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "For gradient descent:\n",
            "          0\n",
            "0  1.587045\n",
            "1  2.522692\n",
            "2  3.890038\n",
            "3  0.746434\n",
            "4 -0.220751\n",
            "5  0.128189\n",
            "6 -0.505701\n",
            "7  0.929778\n",
            "8  0.762069\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lz1v1j3TPOUD"
      },
      "source": [
        "## Deliverable 1\n",
        "\n",
        "Illustrate the effect of the tuning parameter on the inferred ridge regression coefficients by generating a plot of nine lines (one for each of the ùëù = 9 features), with the ùë¶-axis as $ùõΩ_ùëó = 1,2, ... ,9$ , and the ùë•-axis the corresponding log-scaled tuning parameter value $\\log_{10}(ùúÜ)$ that generated the particular $\\hat{ùõΩ}_j$. Label both axes. Without the log scaling of the tuning parameter, the plot will look distorted."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uE9DRHiXPQ7s",
        "outputId": "cd810904-2b6b-4165-c486-18750503e039",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "d1 = pd.DataFrame(to_plot.T)\n",
        "# Adding labels for corresponding b_j values in beta vector computed in dataframe\n",
        "beta = pd.Series(['b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9'])\n",
        "d1 = (d1).rename(columns = beta, inplace = False)\n",
        "# View our dataframe which we will use to plot for Deliverable 1\n",
        "d1\n",
        "\n",
        "# Notes for Plotting\n",
        "# Each column for b_j's in the d1 dataframe will be the plotted y-axis points\n",
        "# And the x-axis will consist of the lambda values on the log scale (first column of dataframe)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>b1</th>\n",
              "      <th>b2</th>\n",
              "      <th>b3</th>\n",
              "      <th>b4</th>\n",
              "      <th>b5</th>\n",
              "      <th>b6</th>\n",
              "      <th>b7</th>\n",
              "      <th>b8</th>\n",
              "      <th>b9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.01</th>\n",
              "      <td>-0.009564</td>\n",
              "      <td>0.004572</td>\n",
              "      <td>0.002080</td>\n",
              "      <td>0.003576</td>\n",
              "      <td>0.008227</td>\n",
              "      <td>-0.006119</td>\n",
              "      <td>-0.005607</td>\n",
              "      <td>-0.008346</td>\n",
              "      <td>-0.002855</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.10</th>\n",
              "      <td>-0.095641</td>\n",
              "      <td>0.045722</td>\n",
              "      <td>0.020798</td>\n",
              "      <td>0.035764</td>\n",
              "      <td>0.082268</td>\n",
              "      <td>-0.061185</td>\n",
              "      <td>-0.056072</td>\n",
              "      <td>-0.083455</td>\n",
              "      <td>-0.028545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.00</th>\n",
              "      <td>-0.956413</td>\n",
              "      <td>0.457224</td>\n",
              "      <td>0.207979</td>\n",
              "      <td>0.357640</td>\n",
              "      <td>0.822679</td>\n",
              "      <td>-0.611854</td>\n",
              "      <td>-0.560718</td>\n",
              "      <td>-0.834554</td>\n",
              "      <td>-0.285452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10.00</th>\n",
              "      <td>-9.564132</td>\n",
              "      <td>4.572236</td>\n",
              "      <td>2.079788</td>\n",
              "      <td>3.576396</td>\n",
              "      <td>8.226792</td>\n",
              "      <td>-6.118544</td>\n",
              "      <td>-5.607181</td>\n",
              "      <td>-8.345542</td>\n",
              "      <td>-2.854518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100.00</th>\n",
              "      <td>-95.641325</td>\n",
              "      <td>45.722357</td>\n",
              "      <td>20.797877</td>\n",
              "      <td>35.763959</td>\n",
              "      <td>82.267915</td>\n",
              "      <td>-61.185443</td>\n",
              "      <td>-56.071811</td>\n",
              "      <td>-83.455419</td>\n",
              "      <td>-28.545178</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1000.00</th>\n",
              "      <td>-956.413248</td>\n",
              "      <td>457.223572</td>\n",
              "      <td>207.978773</td>\n",
              "      <td>357.639594</td>\n",
              "      <td>822.679150</td>\n",
              "      <td>-611.854429</td>\n",
              "      <td>-560.718108</td>\n",
              "      <td>-834.554188</td>\n",
              "      <td>-285.451780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000.00</th>\n",
              "      <td>-9564.132478</td>\n",
              "      <td>4572.235719</td>\n",
              "      <td>2079.787728</td>\n",
              "      <td>3576.395942</td>\n",
              "      <td>8226.791501</td>\n",
              "      <td>-6118.544289</td>\n",
              "      <td>-5607.181084</td>\n",
              "      <td>-8345.541878</td>\n",
              "      <td>-2854.517796</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   b1           b2  ...           b8           b9\n",
              "0.01        -0.009564     0.004572  ...    -0.008346    -0.002855\n",
              "0.10        -0.095641     0.045722  ...    -0.083455    -0.028545\n",
              "1.00        -0.956413     0.457224  ...    -0.834554    -0.285452\n",
              "10.00       -9.564132     4.572236  ...    -8.345542    -2.854518\n",
              "100.00     -95.641325    45.722357  ...   -83.455419   -28.545178\n",
              "1000.00   -956.413248   457.223572  ...  -834.554188  -285.451780\n",
              "10000.00 -9564.132478  4572.235719  ... -8345.541878 -2854.517796\n",
              "\n",
              "[7 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7YwLKBgwbxyE",
        "outputId": "59f586a2-fed3-40b3-9938-1f8755019e6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "source": [
        "# Initialize figure\n",
        "fig = plt.figure()\n",
        "plt.title('Ridge Regression Fit')\n",
        "\n",
        "# Plotting\n",
        "for i in range(len(d1.columns)):\n",
        "  # tuning parameter lambda and lambda_beta column values\n",
        "  plt.plot(tune, d1.iloc[:, i])\n",
        "\n",
        "# Axes\n",
        "plt.xscale('log')\n",
        "plt.xlabel('Tuning Parameter Values')\n",
        "plt.ylabel('Features')\n",
        "\n",
        "plt.show()\n",
        "fig.savefig('Deliverable1.jpg')"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CA5ca8qrtyhz"
      },
      "source": [
        "# Task: Cross Validation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5sAAjno02IjF"
      },
      "source": [
        "## Step 1: \n",
        "\n",
        "First we divide the data into K equal parts. Below I'm going to use the resulting dataframe with 80 rows and 5 columns.  Each column is a 'split' aka a fold. We will use the folds for the next step."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tVgd6L0De51l"
      },
      "source": [
        "### Algorithms\n",
        "**Functions**\n",
        "* Cross Validation Split: computes folds\n",
        "* CV: computes Cross Validation\n",
        "\n",
        "**Summary of Initialized Variables**\n",
        "\n",
        "* X_d2 is the normalized training data centered and scaled to have unit standard deviation\n",
        "* Y_d2 is the true values data (i.e. Credit Balances) generated as ùëÅ-dimensional centered response vector ùê≤\n",
        "* K is the number of folds\n",
        "\n",
        "Same parameters as before repeated again as:\n",
        "\n",
        "* b_d2 will be our random initialized parameter vector of length = dim k.\n",
        "* tune is the Tuning Parameters Vector aka our lambda used in our Cost Function Equation\n",
        "* maximum iteration is 1000\n",
        "* alpha is initialized to 10^(-5) as suggested to act as proof of convergence within 1000 iterations\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t8mzwVWckkzg"
      },
      "source": [
        "### Cross Validation Split Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6j5qxSfgmmNg"
      },
      "source": [
        "# Set K parameter for K-fold Cross Validation\n",
        "K = 5\n",
        "\n",
        "# Import Library for randomization\n",
        "import random\n",
        "from random import randrange\n",
        "\n",
        "# Cross Validation Split Function\n",
        "def cross_validation_split(dataset, folds= K):\n",
        "\tdataset_split = list()\n",
        "\tdataset_copy = list(dataset)\n",
        "\tfold_size = int(len(dataset) / folds)\n",
        "\tfor i in range(folds):\n",
        "\t\tfold = list()\n",
        "\t\twhile len(fold) < fold_size:\n",
        "\t\t\tindex = randrange(len(dataset_copy))\n",
        "\t\t\tfold.append(dataset_copy.pop(index))\n",
        "\t\tdataset_split.append(fold)\n",
        "\treturn dataset_split"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qmusRA1UkaOs"
      },
      "source": [
        "### Initialize Variables for Training\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HGSdDYUXeWdL",
        "outputId": "4518e0f1-87d6-414d-d1b3-598b821508c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 779
        }
      },
      "source": [
        "# Grabbing 5 data folds from X data\n",
        "random.seed(1)                                # random seed\n",
        "                                              # d2 = (training_data.iloc[:,: -1]).values \n",
        "                                              # .values turnes into np array\n",
        "d2 = X.values\n",
        "X_folds = cross_validation_split(d2, K)       # cross validation\n",
        "X_folds_df = (pd.DataFrame(X_folds))          # convert to dataframe\n",
        "X_folds_df.T                                  # Transposed dataframe\n",
        "                                              # Note: fold_size = total_rows / total_folds\n",
        "groups = pd.Series(['k1', 'k2', 'k3', 'k4', 'k5'])\n",
        "X_d2 = (X_folds_df.T).rename(columns = groups, inplace = False)\n",
        "X_d2 "
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k1</th>\n",
              "      <th>k2</th>\n",
              "      <th>k3</th>\n",
              "      <th>k4</th>\n",
              "      <th>k5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[-0.4928995107556017, 0.3827226588126472, 0.40...</td>\n",
              "      <td>[-0.8363879391677917, 0.02270168363344191, 0.0...</td>\n",
              "      <td>[-0.11899479329187766, -0.21947849100575875, -...</td>\n",
              "      <td>[-0.8088657373207883, 0.23325546695124427, 0.2...</td>\n",
              "      <td>[-0.929594571196046, 0.28567729366205513, 0.23...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[0.17912456217870565, 0.15613906071550596, 0.1...</td>\n",
              "      <td>[-0.3490747260520339, -1.2778795046794031, -1....</td>\n",
              "      <td>[1.8655262003008712, 0.8345901402950914, 0.730...</td>\n",
              "      <td>[0.022361505266649616, 0.8237591843631057, 0.8...</td>\n",
              "      <td>[-0.4141633147499988, -0.6249894810993041, -0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[-0.7916998279213686, -1.4732699496924255, -1....</td>\n",
              "      <td>[0.23215445419112807, 0.2527511876288186, 0.14...</td>\n",
              "      <td>[2.349916952808133, 0.9732263762245086, 1.0538...</td>\n",
              "      <td>[-0.7789601695406422, 0.14574134302079966, 0.0...</td>\n",
              "      <td>[-0.5460428963838877, -1.0517291448195414, -1....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[2.524158026563235, 1.3440783073356997, 1.3447...</td>\n",
              "      <td>[-0.704054383070447, -0.08344168450001814, -0....</td>\n",
              "      <td>[-0.6300849189311295, -1.4407770818964685, -1....</td>\n",
              "      <td>[-0.6204947083906271, -0.9434195854996842, -0....</td>\n",
              "      <td>[-0.1229670698471153, 0.12018028702131338, 0.1...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[-0.622395726456348, 0.3064727290514677, 0.336...</td>\n",
              "      <td>[0.38480336752811667, 1.1551864358818686, 1.18...</td>\n",
              "      <td>[3.3511860053637075, 1.7313932914635088, 1.816...</td>\n",
              "      <td>[-0.6894988268358977, -1.5174602498949272, -1....</td>\n",
              "      <td>[-0.8204137127349433, 0.3164372085088946, 0.37...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>[0.7866842613022995, 1.6755055588544625, 1.719...</td>\n",
              "      <td>[-0.5158252211601159, -1.1154151656996174, -1....</td>\n",
              "      <td>[-0.49440330116579867, -0.4023050271376777, -0...</td>\n",
              "      <td>[-0.4899203033391734, -0.5106145864575349, -0....</td>\n",
              "      <td>[-0.6860940183599799, -1.4243140288798501, -1....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>[-0.9825960898045022, -0.2974613737160559, -0....</td>\n",
              "      <td>[0.48785557073256686, 0.7457763016528085, 0.64...</td>\n",
              "      <td>[-0.7112896010817727, -0.9052946206190945, -1....</td>\n",
              "      <td>[-0.016254697531053162, -0.13196436707531414, ...</td>\n",
              "      <td>[-0.7286824977129204, -1.461572517285881, -1.3...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>[-0.8334087317513637, 0.014036918887853333, 0....</td>\n",
              "      <td>[-0.826116766932106, 0.28351110247565803, 0.40...</td>\n",
              "      <td>[0.22951572762229155, -0.8125816378412967, -0....</td>\n",
              "      <td>[0.6176922672809046, 0.38055646762625006, 0.48...</td>\n",
              "      <td>[-0.5931427469674195, -0.5747338455748904, -0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>[0.41595736508276576, 0.940300270191272, 1.112...</td>\n",
              "      <td>[-0.6321561774206461, 0.08118884566616479, 0.0...</td>\n",
              "      <td>[-0.9015616480776546, -1.667793918230889, -1.5...</td>\n",
              "      <td>[0.09303965454591347, 0.5651159567072866, 0.65...</td>\n",
              "      <td>[-0.23521225593654393, 0.6591286541969228, 0.5...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>[-0.9018737555212806, -1.5603508353855908, -1....</td>\n",
              "      <td>[-0.17332986188673508, -0.6700462577763646, -0...</td>\n",
              "      <td>[0.22693374786138706, 0.08985361041175337, 0.0...</td>\n",
              "      <td>[0.4060550470986378, 1.2054420714062823, 1.215...</td>\n",
              "      <td>[-0.8656125452527543, -1.1648043247494724, -1....</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>80 rows √ó 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                   k1  ...                                                 k5\n",
              "0   [-0.4928995107556017, 0.3827226588126472, 0.40...  ...  [-0.929594571196046, 0.28567729366205513, 0.23...\n",
              "1   [0.17912456217870565, 0.15613906071550596, 0.1...  ...  [-0.4141633147499988, -0.6249894810993041, -0....\n",
              "2   [-0.7916998279213686, -1.4732699496924255, -1....  ...  [-0.5460428963838877, -1.0517291448195414, -1....\n",
              "3   [2.524158026563235, 1.3440783073356997, 1.3447...  ...  [-0.1229670698471153, 0.12018028702131338, 0.1...\n",
              "4   [-0.622395726456348, 0.3064727290514677, 0.336...  ...  [-0.8204137127349433, 0.3164372085088946, 0.37...\n",
              "..                                                ...  ...                                                ...\n",
              "75  [0.7866842613022995, 1.6755055588544625, 1.719...  ...  [-0.6860940183599799, -1.4243140288798501, -1....\n",
              "76  [-0.9825960898045022, -0.2974613737160559, -0....  ...  [-0.7286824977129204, -1.461572517285881, -1.3...\n",
              "77  [-0.8334087317513637, 0.014036918887853333, 0....  ...  [-0.5931427469674195, -0.5747338455748904, -0....\n",
              "78  [0.41595736508276576, 0.940300270191272, 1.112...  ...  [-0.23521225593654393, 0.6591286541969228, 0.5...\n",
              "79  [-0.9018737555212806, -1.5603508353855908, -1....  ...  [-0.8656125452527543, -1.1648043247494724, -1....\n",
              "\n",
              "[80 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ORcRtgZOefzK",
        "outputId": "d5d84ae1-2999-4ced-ae64-bb649b786d5f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "# Grab the 5 datafolds for true value Y data\n",
        "random.seed(1)                                   # random seed\n",
        "# balance = (clean['Balance']).values          # np array\n",
        "balance = Y.values\n",
        "Y_folds = cross_validation_split(balance, K)   # cross validation\n",
        "Y_folds_df = (pd.DataFrame(Y_folds))      # convert to dataframe\n",
        "Y_folds_df.T                              # Transposed dataframe dim: 80 x 5 \n",
        "# Note: there are 80 rows per fold as we expected: fold_size = total_rows / K\n",
        "Y_d2 = (Y_folds_df.T).rename(columns = groups, inplace = False)\n",
        "Y_d2"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k1</th>\n",
              "      <th>k2</th>\n",
              "      <th>k3</th>\n",
              "      <th>k4</th>\n",
              "      <th>k5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[301.985]</td>\n",
              "      <td>[168.985]</td>\n",
              "      <td>[-274.015]</td>\n",
              "      <td>[342.985]</td>\n",
              "      <td>[434.985]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[-39.014999999999986]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-129.015]</td>\n",
              "      <td>[525.985]</td>\n",
              "      <td>[11.985000000000014]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[20.985000000000014]</td>\n",
              "      <td>[-270.015]</td>\n",
              "      <td>[211.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[5.985000000000014]</td>\n",
              "      <td>[533.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-101.01499999999999]</td>\n",
              "      <td>[28.985000000000014]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[391.985]</td>\n",
              "      <td>[582.985]</td>\n",
              "      <td>[8.985000000000014]</td>\n",
              "      <td>[-504.015]</td>\n",
              "      <td>[436.985]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>[834.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-200.015]</td>\n",
              "      <td>[-357.015]</td>\n",
              "      <td>[-520.015]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>[-55.014999999999986]</td>\n",
              "      <td>[241.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[276.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>[224.985]</td>\n",
              "      <td>[424.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-38.014999999999986]</td>\n",
              "      <td>[-326.015]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>[511.985]</td>\n",
              "      <td>[142.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[291.985]</td>\n",
              "      <td>[455.985]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-520.015]</td>\n",
              "      <td>[-138.015]</td>\n",
              "      <td>[655.985]</td>\n",
              "      <td>[-520.015]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>80 rows √ó 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                       k1  ...                    k5\n",
              "0               [301.985]  ...             [434.985]\n",
              "1   [-39.014999999999986]  ...  [11.985000000000014]\n",
              "2              [-520.015]  ...            [-520.015]\n",
              "3     [5.985000000000014]  ...  [28.985000000000014]\n",
              "4               [391.985]  ...             [436.985]\n",
              "..                    ...  ...                   ...\n",
              "75              [834.985]  ...            [-520.015]\n",
              "76  [-55.014999999999986]  ...            [-520.015]\n",
              "77              [224.985]  ...            [-326.015]\n",
              "78              [511.985]  ...             [455.985]\n",
              "79             [-520.015]  ...            [-520.015]\n",
              "\n",
              "[80 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D9YSKipd2E3e"
      },
      "source": [
        "## Step 2:\n",
        "\n",
        "Now that we've split the the data into k = 5 groups (columns in Step 1). \n",
        "\n",
        "So that we now run a 5-fold cross validation for every lambda in our tuning parameter vector and evaluated 5 times using the performance summarized by taking the mean performance score (using our gradient descent).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4EQkLl_mfwzG"
      },
      "source": [
        "### Cross Validation Function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OYQP9s15qrD9"
      },
      "source": [
        "# Cross Validation Algorithm\n",
        "def CV(X_d2, Y_d2, tune, alpha):\n",
        "  ''' \n",
        "  Cross Validation Function \n",
        "  :param X_d2: k-fold data dataframe\n",
        "  :param Y_d2: true values fold data dataframe\n",
        "  :param tune: tuning parameter of lambda values\n",
        "  :param alpha: learning rate\n",
        "  :return: beta updated dataframe for each fold, cost dataframe for each fold\n",
        "  '''\n",
        "  CV_5 = (gd(X_d2, Y_d2, tune, alpha, 1000))\n",
        "  cv_beta = CV_5[0] # beta_update\n",
        "  CV_5_beta = (cv_beta).rename(columns = groups, inplace = False)\n",
        "  CV_5_cost = CV_5[1]\n",
        "  CV_5_cost = (CV_5_cost.T).rename(columns = groups, inplace = False)\n",
        "  return CV_5_beta, CV_5_cost\n",
        "\n",
        "# Output for Viewing\n",
        "# print('Cross Validation beta updates for each k-fold:')\n",
        "# print(CV(X_d2, Y_d2, tune, alpha)[0])\n",
        "# print('')\n",
        "# print('Cost for each CV fold')\n",
        "# print(CV(X_d2, Y_d2, tune, alpha)[1])"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p6Iii4UxzixY"
      },
      "source": [
        "### **Cross Validation beta updates for each k-fold**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rzsV69_dottN",
        "outputId": "fd6e34b8-1ba9-44c7-89a2-fd32b7959c9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 114
        }
      },
      "source": [
        "CV_5 = (gd(X_d2, Y_d2, tune, alpha, 1000)[0]) # beta_update\n",
        "CV_5_beta = (CV_5.T).rename(columns = groups, inplace = False)\n",
        "CV_5_beta\n",
        "\n",
        "# for beta in CV_5_beta['k1'][0]:\n",
        "#   print(beta)"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k1</th>\n",
              "      <th>k2</th>\n",
              "      <th>k3</th>\n",
              "      <th>k4</th>\n",
              "      <th>k5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[0.8665391115655625, 1.1009242364545764, 1.102...</td>\n",
              "      <td>[0.5821675881616334, 0.5780734157082644, 0.579...</td>\n",
              "      <td>[0.44399875622923, 0.4280314240447615, 0.44228...</td>\n",
              "      <td>[-0.3996372925768816, -0.4466357169428901, -0....</td>\n",
              "      <td>[0.4274866828753906, 0.4496161230514165, 0.454...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                  k1  ...                                                 k5\n",
              "0  [0.8665391115655625, 1.1009242364545764, 1.102...  ...  [0.4274866828753906, 0.4496161230514165, 0.454...\n",
              "\n",
              "[1 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xld0mQlqzpeW"
      },
      "source": [
        "### **Cost for each K-fold**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "regfNKo_qQ1Y",
        "outputId": "b02ec78c-d787-42a0-f91f-0278ac214555",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        }
      },
      "source": [
        "CV_5_cost = gd(X_d2, Y_d2, tune, alpha, 1000)[1].T # Cost\n",
        "CV_5_cost= (CV_5_cost).rename(columns = groups, inplace = False)\n",
        "CV_5_cost"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k1</th>\n",
              "      <th>k2</th>\n",
              "      <th>k3</th>\n",
              "      <th>k4</th>\n",
              "      <th>k5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.01</th>\n",
              "      <td>-0.007153</td>\n",
              "      <td>-0.008870</td>\n",
              "      <td>-0.006103</td>\n",
              "      <td>-0.005480</td>\n",
              "      <td>-0.006180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.10</th>\n",
              "      <td>-0.071527</td>\n",
              "      <td>-0.088704</td>\n",
              "      <td>-0.061025</td>\n",
              "      <td>-0.054804</td>\n",
              "      <td>-0.061800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.00</th>\n",
              "      <td>-0.715267</td>\n",
              "      <td>-0.887038</td>\n",
              "      <td>-0.610250</td>\n",
              "      <td>-0.548038</td>\n",
              "      <td>-0.617999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10.00</th>\n",
              "      <td>-7.152670</td>\n",
              "      <td>-8.870383</td>\n",
              "      <td>-6.102501</td>\n",
              "      <td>-5.480376</td>\n",
              "      <td>-6.179986</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100.00</th>\n",
              "      <td>-71.526696</td>\n",
              "      <td>-88.703829</td>\n",
              "      <td>-61.025009</td>\n",
              "      <td>-54.803758</td>\n",
              "      <td>-61.799864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1000.00</th>\n",
              "      <td>-715.266960</td>\n",
              "      <td>-887.038285</td>\n",
              "      <td>-610.250089</td>\n",
              "      <td>-548.037585</td>\n",
              "      <td>-617.998636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000.00</th>\n",
              "      <td>-7152.669600</td>\n",
              "      <td>-8870.382851</td>\n",
              "      <td>-6102.500892</td>\n",
              "      <td>-5480.375848</td>\n",
              "      <td>-6179.986362</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   k1           k2           k3           k4           k5\n",
              "0.01        -0.007153    -0.008870    -0.006103    -0.005480    -0.006180\n",
              "0.10        -0.071527    -0.088704    -0.061025    -0.054804    -0.061800\n",
              "1.00        -0.715267    -0.887038    -0.610250    -0.548038    -0.617999\n",
              "10.00       -7.152670    -8.870383    -6.102501    -5.480376    -6.179986\n",
              "100.00     -71.526696   -88.703829   -61.025009   -54.803758   -61.799864\n",
              "1000.00   -715.266960  -887.038285  -610.250089  -548.037585  -617.998636\n",
              "10000.00 -7152.669600 -8870.382851 -6102.500892 -5480.375848 -6179.986362"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HH4SCYXnmmn6"
      },
      "source": [
        "## Deliverable 2\n",
        "\n",
        "Illustrate the effect of the tuning parameter on the cross validation error by generating a plot  with the ùë¶-axis as $CV_{(5)}$ error, and the ùë•-axis the corresponding log-scaled tuning parameter value $\\log_{10}(ùúÜ)$ that generated the particular $CV_{(5)}$ error. Label both axes. Without the log scaling of the tuning parameter, the $CV_{(5)}$ plot will look distorted."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A7Ocf5VwTmCr",
        "outputId": "a0ba6d12-56cb-46f3-9b51-7da42381c958",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "source": [
        "# Initialize figure\n",
        "fig = plt.figure()\n",
        "plt.title('5-Fold Cross Validation')\n",
        "\n",
        "# Plotting\n",
        "for i in range(len(CV_5_cost.columns)):\n",
        "  # tuning parameter lambda and lambda_beta column values\n",
        "  plt.plot(tune, CV_5_cost.iloc[:, i])\n",
        "\n",
        "# Axes\n",
        "plt.xscale('log')\n",
        "plt.xlabel('Tuning Parameter Values')\n",
        "plt.ylabel('CV5 error')\n",
        "\n",
        "# Legend\n",
        "# plt.legend(loc=\"upper left\")\n",
        "\n",
        "plt.show()\n",
        "fig.savefig('Deliverable1.jpg')"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NEjO_9Umnm6E"
      },
      "source": [
        "# Deliverable 3\n",
        "\n",
        "Indicate the value of ùúÜ that generated the smallest $CV_{(5)}$ error."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ANZ7dkyCZZdf",
        "outputId": "58293e53-bbf8-43fd-d714-9ddf8f1ea54e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "source": [
        "# We need to find the minimum value of all the rows\n",
        "# Then the row with the smallest set of values, \n",
        "# will correspond to the lambda which generated the smallest error.\n",
        "\n",
        "# Get minimum errors list for every fold in Cost dataframe\n",
        "for row,column in CV_5_cost.iterrows():\n",
        "  min1 = min(CV_5_cost['k1']) # k1\n",
        "  min2 = min(CV_5_cost['k2']) # k2\n",
        "  min3 = min(CV_5_cost['k3']) # k3\n",
        "  min4 = min(CV_5_cost['k4']) # k4\n",
        "  min5 = min(CV_5_cost['k5']) # k5\n",
        "  Total_Min = pd.Series([min1,min2,min3,min4,min5])\n",
        "\n",
        "# Get minimum error of all folds minimums errors list\n",
        "print('All Minimums for each fold')\n",
        "print(Total_Min.values)\n",
        "min_found =  min(Total_Min)\n",
        "print('min:', min_found)\n",
        "\n",
        "# Get lambda Value that corresponds to the minimum error\n",
        "for i in range(len(Total_Min)):\n",
        "  if Total_Min[i] == min_found:\n",
        "    print('index:', i)\n",
        "\n",
        "# CV_5_cost.iloc[0,i]\n",
        "lowest_error_lambda = tune[i]\n",
        "print('Lambda Value Found that generated the smallest CV(5) error was', lowest_error_lambda)\n",
        "import math\n",
        "print('That is Lambda 10^', math.log10(lowest_error_lambda))"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "All Minimums for each fold\n",
            "[-7152.66960011 -8870.38285108 -6102.50089151 -5480.37584775\n",
            " -6179.98636228]\n",
            "min: -8870.382851082506\n",
            "index: 1\n",
            "Lambda Value Found that generated the smallest CV(5) error was 100\n",
            "That is Lambda 10^ 2.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9VK1diFTnp57"
      },
      "source": [
        "# Deliverable 4\n",
        "\n",
        "Given the optimal ùúÜ, retrain your model on the entire dataset of ùëÅ = 400 observations and provide the estimates of the ùëù = 9 best-fit model parameters."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ZSMiNUkfBoj",
        "outputId": "4acdc943-2ed3-466d-885d-39ce855675ac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 97
        }
      },
      "source": [
        "best_lambda = [10**2]\n",
        "retrain = gd(X,Y,best_lambda,alpha,1000)\n",
        "print('Retrained with the best lambda value, we get the following gradient descent:')\n",
        "col = pd.Series(['b1', 'b2','b3','b4','b5','b6','b7','b8', 'b9'])\n",
        "d4 = pd.DataFrame(retrain[0])\n",
        "d4 = d4.T\n",
        "d4.rename(columns = col, inplace = False)"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Retrained with the best lambda value, we get the following gradient descent:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>b1</th>\n",
              "      <th>b2</th>\n",
              "      <th>b3</th>\n",
              "      <th>b4</th>\n",
              "      <th>b5</th>\n",
              "      <th>b6</th>\n",
              "      <th>b7</th>\n",
              "      <th>b8</th>\n",
              "      <th>b9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.810669</td>\n",
              "      <td>3.847291</td>\n",
              "      <td>2.62477</td>\n",
              "      <td>1.274856</td>\n",
              "      <td>-0.449715</td>\n",
              "      <td>-0.851278</td>\n",
              "      <td>-0.056418</td>\n",
              "      <td>1.836848</td>\n",
              "      <td>-0.736744</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         b1        b2       b3  ...        b7        b8        b9\n",
              "0  1.810669  3.847291  2.62477  ... -0.056418  1.836848 -0.736744\n",
              "\n",
              "[1 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gnPbURqPnnqH"
      },
      "source": [
        "# Deliverable 5\n",
        "\n",
        "***Provide all your source code that you wrote from scratch to perform all analyses (aside from plotting scripts, which you do not need to turn in) in this assignment, along with instructions on how to compile and run your code.***\n",
        "\n",
        "For the Ridge Regression Fitting, we have the following functions with their titles that compute the following:\n",
        "\n",
        "1.   Prediction function: *total_predict*\n",
        "2.   RSS Function: *residual*\n",
        "3.   Cost Function: *cost*\n",
        "4.   Gradient Descent: *gd*\n",
        "\n",
        "Under each function are listed the description of each parameter necessary to run the function's algorithm. Underneath each function is also listed the \"Output\" that is a designated sample instructions/method as on how to use the function.\n",
        "\n",
        "```\n",
        "# Source Codes Listed\n",
        "\n",
        "# Prediction Function\n",
        "def total_predict(X, B):\n",
        "  '''\n",
        "    This function computes the dot product between the rows of design matrix and parameters column vector.\n",
        "    It uses the predict function to iterate through each row of design matrix.\n",
        "    :param X: training_data as pandas dataframe (i.e our Nxp design matrix)\n",
        "    :param B: is parameters_vector as pandas dataframe syntax (i.e p-dimensional B)\n",
        "    :return: predictions vector (i.e. dot product of X and beta parameters vector)\n",
        "  '''\n",
        "      # Corrective measure: Double check appropriate dimensions of dataframes\n",
        "  dim1 = X.shape[1]\n",
        "  dim2 = B.shape[0]\n",
        "  if  (dim1) == (dim2):\n",
        "    predictions = X.dot(B.to_numpy())\n",
        "    return (predictions)\n",
        "  else:\n",
        "    print('Cannot compute. Please check Dimensions!')\n",
        "    print('Dimensions of design matrix Nxp: ', X.shape)\n",
        "    print('Dimensions of Initialized Parameter Vector: (', len(B), 'x 1)')\n",
        "\n",
        "# Output\n",
        "yhat = total_predict(X, beta)\n",
        "print('Total predictions, yhat:')\n",
        "print(yhat)\n",
        "print('')\n",
        "print('yhat Transposed First few entries:')\n",
        "print((yhat.T).head(3))\n",
        "\n",
        "---\n",
        "\n",
        "# RSS Function\n",
        "def residual(Y, yhat):\n",
        "  ''' \n",
        "  :param Y: true values\n",
        "  :param yhat: predictions (i.e. dot product of X and parametric vector beta)\n",
        "  :return: residual sum of sqaures\n",
        "  '''\n",
        "  dim1 = Y.shape\n",
        "  dim2 = yhat.shape\n",
        "  print(\"Y and yhat Dimensions Check:\")\n",
        "  print(dim1, 'and', dim2)\n",
        "  rss = pd.DataFrame((Y.values - yhat.values)**2)\n",
        "  return rss\n",
        "\n",
        "# Output\n",
        "residual_result = residual(Y,yhat)\n",
        "print('rss:', residual_result)\n",
        "\n",
        "---\n",
        "\n",
        "# Cost Function\n",
        "def cost(rss, tuning, b):\n",
        "  ''' \n",
        "  :param b: parametric_vector_B\n",
        "  :param rss: residual sum of squares \n",
        "  :param tuning: tuning_parameter_vector\n",
        "  :return: minimum cost computation\n",
        "  '''\n",
        "  # Checking pandas DataFrame dimensions\n",
        "  tuning = pd.DataFrame(tuning)\n",
        "  dim1, dim2, dim3 = rss.shape, tuning.shape, b.shape\n",
        "  print('')\n",
        "  print('rss Dimensions Check:', dim1)\n",
        "  print('tuning parameter vector Dimensions Check:', dim2)\n",
        "  print('b randomized vector Dimensions Check:', dim3)\n",
        "  print('')\n",
        "  # Cost Computation\n",
        "  tobesummed = []\n",
        "  for j in range(len(b)):\n",
        "    compute = tuning @ ((b.iloc[j])**2)\n",
        "    tobesummed.append(compute)\n",
        "  regularization = sum(tobesummed)\n",
        "  total_cost = rss.values + ((regularization).T).values\n",
        "  # Convert to pandas Dataframe syntax\n",
        "  return pd.DataFrame(total_cost)\n",
        "\n",
        "# Output\n",
        "rss1 = residual(Y, yhat)\n",
        "cost_result = cost(rss1, tune, beta)\n",
        "print('Cost Function Computation:')\n",
        "print(cost_result)\n",
        "\n",
        "---\n",
        "\n",
        "# Gradient Descent Function\n",
        "def gd(X,Y,tune,alpha,max_iter):\n",
        "  '''\n",
        "  :param X: our standardized Nxp design matrix, <class 'pandas.core.frame.DataFrame>\n",
        "  :param Y: our N-dimensional centered y\n",
        "  :param beta: our randomply initialized parametric vector B\n",
        "  :param max_iter: max iterations alloted for convergence\n",
        "  :param alpha: proof of when convergence occurs (i.e. 2*alpha*lambda <1)\n",
        "  :param L: lambda value in tuning parameter vector\n",
        "  :return beta_update, cost: total gradient calculation and cost computation\n",
        "\n",
        "  This function is used for 'training' phase/step.\n",
        "  '''\n",
        "  # Computations\n",
        "  b = pd.DataFrame(data=np.random.uniform(-1, 1, X.shape[1]))\n",
        "  XB = pd.DataFrame((X.values).dot(b.values))\n",
        "  Y_minus_XB = pd.DataFrame(Y.values - XB.values)\n",
        "  X_T_dotprod_Y_minus_XB = (X.T).dot(Y_minus_XB)\n",
        "\n",
        "  # Change to dataframe syntax for computations\n",
        "  tuning = pd.DataFrame(tune)\n",
        "  Lb = tuning.dot(b.T)\n",
        "  # Making pretty dataframe for lambabeta - for faster computations\n",
        "  d = pd.Series(tune)\n",
        "  lambda_beta_df = (Lb.T).rename(columns = d, inplace = False)\n",
        "  # We will use this dataframe to plot a graph later\n",
        "\n",
        "  # Iterate for every column in lambda_beta dataframe and subtract XB column\n",
        "  for i in lambda_beta_df.columns:\n",
        "    compute = lambda_beta_df[i].values - (X_T_dotprod_Y_minus_XB.iloc[:,0].values)\n",
        "\n",
        "  # Iterate for 1000 iterations - this yields convergence by given assumption\n",
        "  for iteration in range(max_iter):\n",
        "    b_temp = (2*alpha)*(pd.DataFrame(compute))\n",
        "    b_update = b - b_temp\n",
        "  return b_update, lambda_beta_df # return new updated beta vector\n",
        "\n",
        "# Output\n",
        "gd_computation = (gd(X, Y, tune, alpha, 1000)[0])\n",
        "to_plot = (gd(X, Y, tune, alpha, 1000)[1])\n",
        "print('For gradient descent:')\n",
        "print(gd_computation)\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aho1omjKjJ76"
      },
      "source": [
        "For the Cross Validation, listed below are the algorithms source codes. Functions listed are as follows:\n",
        "\n",
        "\n",
        "\n",
        "1.   Cross Validation Split Function: *cross_validation_split*\n",
        "2.   Cross Validation Function: *CV*\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "# Set K parameter for K-fold Cross Validation\n",
        "K = 5\n",
        "\n",
        "# Import Library for randomization\n",
        "import random\n",
        "from random import randrange\n",
        "\n",
        "# Cross Validation Split Function\n",
        "def cross_validation_split(dataset, folds= K):\n",
        "\tdataset_split = list()\n",
        "\tdataset_copy = list(dataset)\n",
        "\tfold_size = int(len(dataset) / folds)\n",
        "\tfor i in range(folds):\n",
        "\t\tfold = list()\n",
        "\t\twhile len(fold) < fold_size:\n",
        "\t\t\tindex = randrange(len(dataset_copy))\n",
        "\t\t\tfold.append(dataset_copy.pop(index))\n",
        "\t\tdataset_split.append(fold)\n",
        "\treturn dataset_split\n",
        "\n",
        "  ---\n",
        "# Cross Validation Algorithm\n",
        "def CV(X_d2, Y_d2, tune, alpha):\n",
        "  ''' \n",
        "  Cross Validation Function \n",
        "  :param X_d2: k-fold data dataframe\n",
        "  :param Y_d2: true values fold data dataframe\n",
        "  :param tune: tuning parameter of lambda values\n",
        "  :param alpha: learning rate\n",
        "  :return: beta updated dataframe for each fold, cost dataframe for each fold\n",
        "  '''\n",
        "  CV_5 = (gd(X_d2, Y_d2, tune, alpha, 1000))\n",
        "  cv_beta = CV_5[0] # beta_update\n",
        "  CV_5_beta = (cv_beta).rename(columns = groups, inplace = False)\n",
        "  CV_5_cost = CV_5[1]\n",
        "  CV_5_cost = (CV_5_cost.T).rename(columns = groups, inplace = False)\n",
        "  return CV_5_beta, CV_5_cost\n",
        "\n",
        "# Output for Viewing\n",
        "# print('Cross Validation beta updates for each k-fold:')\n",
        "# print(CV(X_d2, Y_d2, tune, alpha)[0])\n",
        "# print('')\n",
        "# print('Cost for each CV fold')\n",
        "# print(CV(X_d2, Y_d2, tune, alpha)[1])\n",
        "\n",
        "# Recommended Visual Output for Viewing for beta updates output:\n",
        "\n",
        "CV_5 = (gd(X_d2, Y_d2, tune, alpha, 1000)[0]) # beta_update\n",
        "CV_5_beta = (CV_5.T).rename(columns = groups, inplace = False)\n",
        "CV_5_beta\n",
        "\n",
        "# Recommended Visual Output for Viewing for K-folds cost output:\n",
        "\n",
        "CV_5_cost = gd(X_d2, Y_d2, tune, alpha, 1000)[1].T # Cost\n",
        "CV_5_cost= (CV_5_cost).rename(columns = groups, inplace = False)\n",
        "CV_5_cost\n",
        "\n",
        "```\n",
        "You will need to initialize the folds as follows to use the Cross Validation functions mentioned above:\n",
        "\n",
        "```\n",
        "# Grabbing 5 data folds from X data\n",
        "random.seed(1)                                # random seed\n",
        "                                              # d2 = (training_data.iloc[:,: -1]).values \n",
        "                                              # .values turnes into np array\n",
        "d2 = X.values\n",
        "X_folds = cross_validation_split(d2, K)       # cross validation\n",
        "X_folds_df = (pd.DataFrame(X_folds))          # convert to dataframe\n",
        "X_folds_df.T                                  # Transposed dataframe\n",
        "                                              # Note: fold_size = total_rows / total_folds\n",
        "groups = pd.Series(['k1', 'k2', 'k3', 'k4', 'k5'])\n",
        "X_d2 = (X_folds_df.T).rename(columns = groups, inplace = False)\n",
        "X_d2 \n",
        "\n",
        "---\n",
        "\n",
        "# Grab the 5 datafolds for true value Y data\n",
        "random.seed(1)                                   # random seed\n",
        "# balance = (clean['Balance']).values          # np array\n",
        "balance = Y.values\n",
        "Y_folds = cross_validation_split(balance, K)   # cross validation\n",
        "Y_folds_df = (pd.DataFrame(Y_folds))      # convert to dataframe\n",
        "Y_folds_df.T                              # Transposed dataframe dim: 80 x 5 \n",
        "# Note: there are 80 rows per fold as we expected: fold_size = total_rows / K\n",
        "Y_d2 = (Y_folds_df.T).rename(columns = groups, inplace = False)\n",
        "Y_d2\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "\n"
      ]
    }
  ]
}